#!/usr/bin/expect -f

# Get host IP for QEMU networking
set HOST_IP [exec ip route get 1.1.1.1 | awk {{print $7; exit}}]

# Function to generate install.conf with environment variable interpolation
proc generate_install_conf {} {
    set user_password [exec env | grep -E "^USER_PASSWORD=" | cut -d= -f2-]
    set root_password [exec env | grep -E "^ROOT_PASSWORD=" | cut -d= -f2-]
    # Generate install.conf
    set conf_content "System hostname = openbsd-vm
Password for root = $root_password
Do you expect to run the X Window System = no
Change the default console to com0 = yes
Which speed should com0 use = 19200
Setup a user = a2f0
Password for user = $user_password
Public ssh key for user = ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDNc4EolzqwqciuPM12WtwA/tC0GjUL6q6XZyEr/VJC0TEACwP6syaqLPET1JxDx7Bsb93uQM7YT9gkn8iAZzw6nAelcixA2lw3b5TUGjyb10zDgGmtZb2r6ksbBokdWdRQzTg2Io+aNv5z27V0lmoEzqN/ePX74GY4oPUWt3CfNqAquS5Ig7YolX0F3BfcjXyFmZ9xWK0BxHP+s/37+GK3S1vb3WjLUV+OEX4E4g4nn/P2iuMUkon+GEQj5kajX97hQ2P5PDGztUPgu2nIeQMMOV3ktetgBc1qWflYEM/1WwKeC0bFvwtNiDmDAipJfJU4NQJ2DI31pOfbOydnkJyl dansullivan@gmail.com
What timezone are you in = UTC
Location of sets = cd0
HTTP Server = cdn.openbsd.org
Disk to use = sd0
Partitioning = auto
# Directory does not contain SHA256.sig. Continue without verification?
Continue without verification? = yes
Set name(s) = -game* -x* -comp*"
    
    # Write the content to install.conf
    set file [open "install.conf" w]
    puts $file $conf_content
    close $file
    
    puts "Generated install.conf with interpolated passwords"
}

puts "Starting Python web server on port 8686..."
exec python3 -m http.server 8686 &
set WEB_SERVER_PID [exec pgrep -f "python3 -m http.server 8686"]

puts "Waiting for web server to start listening on port 8686..."
while {1} {
    set result [catch {exec netstat -tuln | grep ":8686 "} output]
    if {$result == 0 && $output != ""} {
        break
    }
    sleep 0.1
}
puts "Web server is now listening on port 8686"

proc cleanup {} {
    global WEB_SERVER_PID
    puts "Cleaning up..."
    if {$WEB_SERVER_PID != ""} {
        puts "Stopping Python web server (PID: $WEB_SERVER_PID)..."
        catch {exec kill $WEB_SERVER_PID}
    }
}

# Set up trap to always run cleanup on exit
proc exit_handler {} {
    cleanup
    exit
}

# Register the exit handler
exit -onexit exit_handler

# Function to download file with error handling
proc download_file {url filename} {
    puts "Attempting to download $filename from $url"
    
    # Try wget
    set wget_result [catch {exec wget -q -O $filename $url} wget_output]
    if {$wget_result == 0} {
        puts "Download completed successfully using wget"
        return 1
    }
    
    puts "wget failed: $wget_output"
    puts "Please install wget or download manually."
    return 0
}

set OPENBSD_VERSION "7.7"
set OPENBSD_PERIOD_STRIPPED [regsub -all {\.} $OPENBSD_VERSION ""]
set ISO_FILE "install$OPENBSD_PERIOD_STRIPPED.iso"
set SHA256_FILE "SHA256"
set DISK_FILE "openbsd-vm.qcow2"

set ARCH [exec uname -m]
if {$ARCH != "x86_64"} {
    puts "Error: This script requires x86_64 architecture. Current architecture: $ARCH"
    exit 1
}

if {![file exists $SHA256_FILE]} {
    puts "ISO file not found: $SHA256_FILE"
    set download_url "https://cdn.openbsd.org/pub/OpenBSD/$OPENBSD_VERSION/amd64/SHA256"
    
    if {[download_file $download_url $SHA256_FILE]} {
        puts "Download completed: $SHA256_FILE"
    } else {
        puts "Failed to download SHA256 file."
        cleanup
        exit 1
    }
} else {
    puts "SHA256 file already exists: $SHA256_FILE"
}

if {![file exists $ISO_FILE]} {
    puts "ISO file not found: $ISO_FILE"
    set download_url "https://cdn.openbsd.org/pub/OpenBSD/$OPENBSD_VERSION/amd64/$ISO_FILE"
    
    if {[download_file $download_url $ISO_FILE]} {
        puts "Download completed: $ISO_FILE"
    } else {
        puts "Failed to download ISO file."
        cleanup
        exit 1
    }
} else {
    puts "ISO file already exists: $ISO_FILE"
}

# Verify SHA256 checksums
puts "Verifying SHA256 checksums..."
set sha256_result [catch {exec sha256sum -c SHA256 --ignore-missing} sha256_output]
if {$sha256_result != 0} {
    puts "Error: SHA256 verification failed: $sha256_output"
    cleanup
    exit 1
}
puts "SHA256 verification completed successfully"

if {[file exists $DISK_FILE]} {
    puts "Error: Virtual disk '$DISK_FILE' already exists."
    cleanup
    exit 1
}

generate_install_conf

puts "Creating virtual disk image..."
exec qemu-img create -f qcow2 $DISK_FILE 5G

puts "Starting QEMU with network access to host IP: $HOST_IP"

spawn qemu-system-x86_64 \
  -m 4096 \
  -smp cpus=2 \
  -nographic \
  -cdrom $ISO_FILE \
  -hda $DISK_FILE \
  -boot c

expect "boot>"
send "set tty com0\r"
expect "boot>"
send "boot\r"
expect -timeout 60 "(I)nstall, (U)pgrade, (A)utoinstall or (S)hell?"
send "A\r"
expect "Response file location?"
send "http://10.0.2.2:8686/install.conf\r"
expect -timeout 600 "login: "

# Enter the qemu menu by pressing cntrl+a, then c
# cntrl + a
send "\x01" 
sleep 0.1
send "c"

expect "(qemu)"

# qemu command to shut down the vm
send "system_powerdown\r"

# Wait for the VM to shut down completely
# expect -timeout 60 "qemu-system-x86_64: terminating on signal"

puts "Waiting for vm to stop..."

# Wait for the spawn process to finish
wait


puts "\rFinished"
